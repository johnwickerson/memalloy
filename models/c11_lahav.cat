(* This is a formalisation of the C11 memory model presented in the
   paper "Repairing Sequential Consistency in C/C++11" by Ori Lahav,
   Viktor Vafeiadis, Jeehoon Kang, Chung-Kil Hur, and Derek Dreyer
   (PLDI'17). The deadness predicates come from the paper 
   "Automatically Comparing Memory Consistency Models" by John 
   Wickerson, Mark Batty, Tyler Sorensen and George A. 
   Constantinides (POPL'17).
 *)

"C"

include "basic.cat"

let mo = co
let rmw = atom
let fsb = [F]; sb
let sbf = sb; [F]
      
let eco = (rf | mo | fr)+
let rs = [W]; poloc?; [W & A]; (rf; rmw)*
let sw = [REL]; fsb?; rs; rf; [R & A]; sbf?; [ACQ]
let hb = (sb | sw)+
let hbloc = hb & sloc
let fhb = [F]; hb
let hbf = hb; [F]
                     
let sbdl = sb \ poloc
let scb = sb | sbdl;hb;sbdl | hbloc | mo | fr
let pscb = [SC]; fhb?; scb; hbf?; [SC]
let pscf = [SC & F]; (hb | hb;eco;hb); [SC & F]
let psc = pscb | pscf

(** Consistency predicates *)
                   
irreflexive hb; eco? as Coherence
empty rmw & (fr;mo) as Atomicity
acyclic psc as SC
acyclic sb | rf as NoThinAir

(** Race-freedom predicates *)
           
let cnf = ((W*R) | (R*W) | (W*W)) & sloc \ id
let dr = cnf \ (A*A) \ hb \ hb^-1

undefined_unless empty dr as DataRace

(** Deadness *)
                                                                 
(* no "if(r==0)" *)
deadness_requires empty if_zero as No_If_Zero 

(* coherence edges are forced *)
deadness_requires empty unforced_co as Forced_Co

(* external control dependency *)
let cde = ((rf \ thd) | ctrl)* ; ctrl
(* dependable release sequence *)
let drs = rs \ ([R]; !cde)
(* dependable synchronises-with *)
let dsw = sw & (((fsb?; [REL]; drs?) \ (!ctrl; !cde)) ; rf)		 
(* dependable happens-before *)
let dhb = po?; (dsw;ctrl)*
(* potential data race *)
let pdr = cnf \ (A*A)


deadness_requires empty pdr \ (dhb | dhb^-1) as Dead_Pdr
